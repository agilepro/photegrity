package bogus;

import bogus.DOMUtils;
import java.io.InputStreamReader;
import java.io.Reader;
import java.io.Writer;
import java.io.Writer;
import java.net.URLConnection;
import java.net.URLEncoder;
import java.util.Collections;
import java.util.Comparator;
import java.util.Enumeration;
import java.util.Hashtable;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

/**
* The purpose of this class is to read XML documentation
* created usign DITA guidelines, and transorm them to a text file
* which can be used by the Interstage BPM wiki support.
* Thus help files become wiki files which users can annotate and extend.
*/
public class DitaTransform {

    static final int BLOCK_NONE = 1;
    static final int BLOCK_STARTED = 2;

    static final int TYPE_PARAGRAPH = 3;
    static final int TYPE_BULLET = 4;
    static final int TYPE_HEADER = 6;

    static final int STYLE_OFF = 8;
    static final int STYLE_NEEDED = 9;
    static final int STYLE_ON = 10;


    int newBlockType = TYPE_PARAGRAPH;
    int existingBlockType = TYPE_PARAGRAPH;

    int blockState = BLOCK_NONE;
    int boldStyle = STYLE_OFF;
    int italicStyle = STYLE_OFF;

    boolean startOfLine = true;

    // should be converted to be stream oriented
    public String dita2Wiki(Element parent)
        throws Exception
    {
        StringBuffer xretval = new StringBuffer();
        StringBufferWriter sbr = new StringBufferWriter(xretval);
        recursiveDita(parent, w);
        return xretval.toString();
    }

    private void recursiveDita(Element parent, Writer w)
        throws Exception
    {
        Enumeration eee = DOMUtils.getChildElements(parent);
        while (eee.hasMoreElements()) {
            Element ele = (Element)eee.nextElement();
            String eleName = ele.getTagName();
            if (eleName==null) {
                //do nothing
            } else if(eleName.equalsIgnoreCase("title")) {
                w.append("\n!!!");
                w.append(DOMUtils.textValueOf(ele, true));
                w.append("\n");
            } else if(eleName.equals("taskbody")) {
                recursiveDita(ele, w);
            } else if(eleName.equals("prereq")) {
                recursiveDita(ele, w);
            } else if(eleName.equals("context")) {
                recursiveDita(ele, w);
            } else if(eleName.equals("steps")) {
                recursiveDita(ele, w);
            } else if(eleName.equals("result")) {
                recursiveDita(ele, w);
            } else if(eleName.equals("p")) {
                ditaBlock(ele, w);
            } else if(eleName.equals("step")) {
                ditaBlock(ele, w);
            } else {
                w.append("\n--what is "+eleName+"?\n");
            }
        }
    }

    private void ditaBlock(Element parent, Writer w)
        throws Exception
    {
        String eleName = parent.getTagName();
        String trailer = "";
        if (eleName.equalsIgnoreCase("p")) {
            w.append("\n");
            trailer = "\n";
        } else if (eleName.equals("uicontrol")) {
            ditaStyle(parent,w);
            return;
        } else if (eleName.equals("b")) {
            //fake a p since it is missing
            w.append("\n");
            ditaStyle(parent,w);
            w.append("\n");
            return;
        } else if (eleName.equals("cmd")) {
            //nothing special needed
        } else if (eleName.equals("info")) {
            //nothing special needed
        } else if (eleName.equals("stepresult")) {
            //nothing special needed
        } else if (eleName.equals("note")) {
            w.append("\nNote: ");
        } else if (eleName.equals("step")) {
            w.append("\n* ");
            trailer = "\n";
        } else {
            w.append("\n--unknown block "+eleName+"\n");
        }
        NodeList childNdList = parent.getChildNodes();
        for (int i = 0 ; i < childNdList.getLength(); i++) {
            org.w3c.dom.Node n = childNdList.item(i) ;
            if (n.getNodeType() == org.w3c.dom.Node.ELEMENT_NODE) {
                Element ele = (Element)n;
                eleName = parent.getTagName();
                if (eleName.equals("cmd")) {
                    ditaBlock(ele, w);
                } else if (eleName.equals("info")) {
                    ditaBlock(ele, w);
                } else if (eleName.equals("p")) {
                    ditaBlock(ele, w);
                } else if (eleName.equals("cmd")) {
                    ditaBlock(ele, w);
                } else if (eleName.equals("step")) {
                    ditaBlock(ele, w);
                } else {
                    ditaStyle(ele, w);
                }
            }
            else {
                w.append(n.getNodeValue());
            }
        }
        w.append(trailer);
    }

    private void ditaStyle(Element parent, Writer w)
        throws Exception
    {
        String eleName = parent.getTagName();
        if(eleName.equals("strong") || eleName.equals("b")) {
            if (boldStyle != STYLE_OFF) {
                throw new Exception("Style bold is already on, but got a nested request for this style ... should not happen");
            }
            boldStyle = STYLE_NEEDED;
            styleChildren(parent, w);
            concludeBold(w);
        }
        if(eleName.equals("emphasis") || eleName.equals("i")) {
            if (italicStyle != STYLE_OFF) {
                throw new Exception("Style italic is already on, but got a nested request for this style ... should not happen");
            }
            italicStyle = STYLE_NEEDED;
            styleChildren(parent, w);
            concludeItalic(w);
        } else if (eleName.equals("uicontrol")) {
            w.write("\"");
            styleChildren(parent, w);
            w.write("\"");
        } else if (eleName.equals("note")) {
            w.write("Note: ");
            styleChildren(parent, w);
        } else {
            w.write("\n+++style for "+eleName+"\n");
            styleChildren(parent, w);
            w.write("\n---style for "+eleName+"\n");
        }
    }

    private void styleChildren(Element parent, Writer w)
        throws Exception
    {
        w.append(styleText);
        NodeList childNdList = parent.getChildNodes();
        for (int i = 0 ; i < childNdList.getLength(); i++) {
            org.w3c.dom.Node n = childNdList.item(i) ;
            if (n.getNodeType() == org.w3c.dom.Node.ELEMENT_NODE) {
                Element ele = (Element)n;
                ditaStyle(ele, w);
            }
            else {
                w.append(n.getNodeValue());
            }
        }
        w.append(trailer);
    }

    /**
    * bold and italics should be strictly nested.  In otherwords
    * we never want:   <b><i></b></i>
    * we need to "unwrap" the styles in the same order they
    * were wrapped.  If the source styling is good, this should
    * not be a problem, and the dita source is well structured
    * XML, so we don't need to worry about this.
    */
    private void concludeBold(Writer w)
        throws Exception
    {
        if (boldStyle==STYLE_ON) {
            w.write("__");
        }
        boldStyle = STYLE_OFF;
    }
    private void concludeItalic(Writer w)
        throws Exception
    {
        if (italicStyle==STYLE_ON) {
            w.write("''");
        }
        italicStyle = STYLE_OFF;
    }

    private void startBlock(Writer w)
        throws Exception
    {

    }

    private void concludeBlock(Writer w)
        throws Exception
    {
        if (blockState==BLOCK_NONE) {
            return;  //nothing to do
        }
        if (blockType==TYPE_PARAGRAPH) {
            newLineIfNeeded(w);
            w.write("\n");  //blank line always ends a paragraph
        } else if (blockType==TYPE_BULLET) {
            newLineIfNeeded(w);
        } else if (blockType==TYPE_HEADER) {
            newLineIfNeeded(w);
        }
        blockState=BLOCK_NONE;
    }

    private void newLineIfNeeded(Writer w)
    {
        if (!startOfLine) {
            w.write("\n");
            startOfLine = true;
        }
    }

    private void writeIntoBlock(String text, Writer w)
    {
        if (blockState == BLOCK_NONE) {
            w.write("");
        }
        if (boldStyle == STYLE_NEEDED) {
            w.write("__");
            boldStyle = STYLE_ON;
        }
        if (italicStyle == STYLE_NEEDED) {
            w.write("''");
            italicStyle = STYLE_ON;
        }

        int startPos = 0;
        int pos = text.indexOf("\n");
        while (pos >= startPos) {
            if (pos>startPos) {
                String line = text.substring(startPos, pos);
                w.write(line);
                w.write("\n");
                if (blockType!=TYPE_PARAGRAPH) {
                    w.write("   ");
                }
                startOfLine = false;
            }
            startPos = pos+1;
            pos = text.indexOf("\n", startPos);
        }
        if (startPos<text.length()) {
            String line = text.substring(startPos, pos);
            w.write(line);
            w.write("\n");
            if (blockType!=TYPE_PARAGRAPH) {
                w.write("   ");
            }
            startOfLine = false;
        }

    }
}